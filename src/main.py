# NTC overall simulation and study

from components import Diode, NTC
from ntccond import NTC_simulation
from ntcchar import NTC_characterization
from utils import curvature, curvature2, fake_curvature, multi_curvature

import numpy as np
import scipy.constants as spc
import scipy.io as spio
import matplotlib.pyplot as plt

# Simulation
diode_1N4148 = Diode(Is =  2.7e-9, Eta = 1.8, Rth = 350)
diode_1N4007 = Diode(Is = 500e-12, Eta = 1.5, Rth =  93)
diode_BC817  = Diode(Is =  20e-15, Eta = 1.0, Rth = 160)
# ntc_B57703M_10k = NTC(R0=10e3, T0=spc.convert_temperature(25, 'Celsius', 'Kelvin'), Rth=333, Beta=3988)
ntc_B57703M_10k = NTC(R0=10e3, T0=spc.convert_temperature(25, 'Celsius', 'Kelvin'), Rth=333, Table="../data/temperature_data.csv")
mysim = NTC_simulation(3.3, 4, diode_BC817, ntc_B57703M_10k, name="BC817")
mychar = NTC_characterization(ntc_B57703M_10k)
Tx, Tx_deg = mysim.get_temperatures()
v_out = np.empty((mysim.N_sim, 4))
i_ntc = np.empty_like(v_out)
T_ntc = np.empty_like(v_out)
T_diode = np.empty_like(v_out)
Rx = np.empty_like(v_out)
g = np.empty_like(v_out)
v_out[:,0], i_ntc[:,0], Rx[:,0], g[:,0] = mysim.sim_ideal_diode()
v_out[:,1], i_ntc[:,1], T_ntc[:,1], T_diode[:,1], Rx[:,1], g[:,1] = mysim.sim_divider(Resistor_selfheat=True, Diode_selfheat=True)
v_out[:,2], i_ntc[:,2], Rx[:,2], g[:,2] = mysim.analysis_ideal_diode()
v_out[:,3], i_ntc[:,3], Rx[:,3], g[:,3] = mysim.analysis_divider()
asd = mysim.g_cal[0] + (mysim.g_cal[1] - mysim.g_cal[0]) * (mysim.v_cal[0] - v_out[:,1])/(mysim.v_cal[0] - mysim.v_cal[1])
qwe = np.polyfit(asd, g[:,1], 3)
# v_n, i_n, R_n, T_n = mychar.simulate(400)
# v_m, i_m, R_m, I_m, V_m = mychar.analyze(400)
# v_a, i_a, R_a, T_a = mychar.attempt(400)

data = spio.loadmat('../data/asdf.mat')
Ron_min = max(min(data['Ron'][:,0]), min(data['Ron'][:,3]))
Ron_max = min(max(data['Ron'][:,0]), max(data['Ron'][:,3]))
rons = np.linspace(Ron_min, Ron_max, 1001)
Ts_ref = np.interp(rons, data['Ron'][:,3], data['T'][:,3])
Ts_out = np.interp(rons, data['Ron'][:,0], data['T'][:,0])
T_rms_error = np.sqrt(np.mean((Ts_ref - Ts_out)**2))
print('RMS error: ', T_rms_error)


plt.figure(8)
plt.gcf().set_size_inches(4, 3)
plt.plot(data['T'][:,(0, 3)], 1e3*data['Ron'][:,(0, 3)], label=['proposed sensing', 'thermal chamber'])
plt.xlabel('Junction temperature ($^{\circ}C$)')
plt.ylabel('On-state resistance ($m\Omega$)')
plt.legend()
plt.grid()
plt.savefig('ron.pdf', bbox_inches='tight')
plt.show(block=False)

plt.figure(9)
plt.gcf().set_size_inches(4, 3)
plt.plot(Ts_ref, Ts_out, '-', label='experimental data')
plt.plot(Ts_ref, Ts_ref, '--', label='ideal reference')
plt.xlabel('Ambient temperature ($^{\circ}C$)')
plt.ylabel('Sensed temperature ($^{\circ}C$)')
plt.legend()
plt.grid()
plt.savefig('temp_comparison.pdf', bbox_inches='tight')
plt.show(block=False)

# Results
plt.figure(1)
plt.plot(v_out, 1/Tx, label=['ideal diode (sim)', 'divider (sim)', 'ideal diode (model)', 'divider (model)'])
plt.xlabel('Output voltage (V)')
plt.ylabel('Temperature reciprocal (1/K)')
plt.legend()
plt.grid()
plt.show(block=False)

plt.figure(2)
plt.plot(v_out, Tx)
plt.xlabel('Output voltage (V)')
plt.ylabel('Temperature (K)')
plt.grid()
plt.show(block=False)

plt.figure(3)
plt.gcf().set_size_inches(4, 3)
plt.plot(Tx_deg, 1e3*(T_ntc[:,1] - Tx), label='NTC')
plt.plot(Tx_deg, 1e3*(T_diode[:,1] - mysim.T_base), label='BJT')
plt.xlabel('Measured temperature (Â°C)')
plt.ylabel('Component overtemperature (mK)')
plt.legend()
plt.grid()
plt.savefig('overtemp_N6.pdf', bbox_inches='tight')
plt.show(block=False)

plt.figure(4)
# plt.plot(v_out[0:-1,:], fake_curvature(v_out, 1/Tx[:,np.newaxis]), label=['ideal diode (sim)', 'divider (sim)', 'ideal diode (model)', 'divider (model)'])
plt.plot(v_out, multi_curvature(v_out, 1/Tx), label=['ideal diode (sim)', 'divider (sim)', 'ideal diode (model)', 'divider (model)'])
plt.xlabel('Output voltage (V)')
plt.ylabel('Curvature')
plt.legend()
plt.grid()
plt.show(block=False)

plt.figure(5)
plt.plot(v_out, g, label=['ideal diode (sim)', 'divider (sim)', 'ideal diode (model)', 'divider (model)'])
plt.plot(v_out[:,1], asd, label='simplified')
plt.xlabel('Output voltage (V)')
plt.ylabel('Real normalized resistance g (1)')
plt.legend()
plt.grid()
plt.show(block=False)

plt.figure(6)
plt.plot(asd, g[:,1], asd, np.polyval(qwe, asd))
plt.xlabel('Estimated normalized resistance g (1)')
plt.ylabel('Real normalized resistance g (1)')
plt.legend()
plt.grid()
plt.show(block=False)

plt.figure(7)
plt.gcf().set_size_inches(4, 3)
plt.plot(v_out[:,1], g[:,1], label='simulation')
plt.plot(v_out[:,1], asd, label='simplified')
plt.xlabel('Output voltage $v_x$ (V)')
plt.ylabel('Normalized log resistance $g$ (1)')
plt.legend()
plt.grid()
plt.savefig('characteristics_N1.pdf', bbox_inches='tight')
plt.show(block=True)

'''
plt.figure(5)
plt.subplot(3, 1, 1)
plt.loglog(i_n * 1e3, v_n)
plt.loglog(i_m * 1e3, v_m)
plt.loglog(I_m * 1e3, V_m, 'x')
plt.loglog(i_a * 1e3, v_a)
plt.xlabel('Test current (mA)')
plt.ylabel('NTC voltage (V)')
plt.grid()
plt.subplot(3, 1, 2)
plt.loglog(i_n * 1e3, T_n)
plt.xlabel('Test current (mA)')
plt.ylabel('NTC temperature (K)')
plt.grid()
plt.subplot(3, 1, 3)
plt.loglog(i_n * 1e3, R_n)
plt.loglog(i_n * 1e3, ntc_B57703M_10k.r_value(400) * np.ones_like(i_n))
plt.loglog(i_n * 1e3, ntc_B57703M_10k.r_value(1e6) * np.ones_like(i_n))
plt.xlabel('Test current (mA)')
plt.ylabel('NTC resistance (ohm)')
plt.grid()
plt.show(block=False)

x = np.log(i_n)
y = np.log(v_n)
y = np.diff(y) / np.diff(x)
x = x[0:-1]
plt.figure(6)
plt.plot(x, y)
plt.show(block=True)
'''

print('Ciao')
print(qwe)
